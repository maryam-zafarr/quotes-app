{"version":3,"sources":["components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.js","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","pages/AllQuotes.jsx"],"names":["module","exports","NoQuotesFound","className","classes","noquotes","to","QuoteItem","props","item","text","author","id","QuoteList","quotes","ascending","navigate","useNavigate","location","useLocation","isAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","pathname","list","map","quote","AllQuotes","useHttp","getAllQuotes","sendRequest","status","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,gC,qBCA7BD,EAAOC,QAAU,CAAC,KAAO,wB,qBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2B,oFCa5CC,EAXO,WACpB,OACE,sBAAKC,UAAWC,IAAQC,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMC,GAAG,aAAaH,UAAU,MAAhC,2BAKL,E,wBCQcI,EAjBG,SAACC,GAEjB,OACE,qBAAIL,UAAWC,IAAQK,KAAvB,UACE,mCACE,qCACE,4BAAID,EAAME,SAEZ,qCAAaF,EAAMG,YAErB,cAAC,IAAD,CAAML,GAAE,kBAAaE,EAAMI,IAAMT,UAAU,MAA3C,+BAKL,E,iBCsCcU,EAvCG,SAACL,GACjB,IAZkBM,EAAQC,EAYpBC,EAAWC,cACXC,EAAWC,cAIXC,EAA0C,QAF5B,IAAIC,gBAAgBH,EAASI,QAEjBC,IAAI,QAE9BC,GAnBYV,EAmBcN,EAAMM,OAnBZC,EAmBoBK,EAlBvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,GAAK,GAAK,CAEvC,KAwBD,OACE,eAAC,WAAD,WACE,qBAAKT,UAAWC,IAAQwB,QAAxB,SACE,yBAAQC,QAbS,WAOrBb,EAAS,GAAD,OAAIE,EAASY,SAAb,iBAA+BV,EAAc,OAAS,OAC/D,EAKK,kBAAuCA,EAAc,aAAe,iBAEtE,oBAAIjB,UAAWC,IAAQ2B,KAAvB,SACGP,EAAaQ,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEErB,GAAIqB,EAAMrB,GACVD,OAAQsB,EAAMtB,OACdD,KAAMuB,EAAMvB,MAHPuB,EAAMrB,GAFG,QAWzB,E,wBChBcsB,UA/BG,WAChB,MAAmDC,YAAQC,KAAc,GAAlEC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OAAcxB,EAAlC,EAA4ByB,KAAcC,EAA1C,EAA0CA,MAM1C,OAJAC,qBAAU,WACTJ,GACA,GAAC,CAACA,IAEY,YAAXC,EAEA,qBAAKnC,UAAU,WAAf,SACE,cAACuC,EAAA,EAAD,MAKFF,EACK,mBAAGrC,UAAU,mBAAb,SAAiCqC,IAG3B,cAAXF,GAA4BxB,GAA4B,IAAlBA,EAAO6B,OAK/C,mCACE,cAAC,EAAD,CAAW7B,OAAQA,MALd,cAAC,EAAD,GASV,C","file":"static/js/3.d07f4404.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","import { Link } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to='/new-quote' className='btn'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { Link } from 'react-router-dom';\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className='btn'>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\n\nconst QuoteList = (props) => {\n  const navigate = useNavigate()\n  const location = useLocation()\n\n  const queryParams = new URLSearchParams(location.search)\n\n  const isAscending = queryParams.get('sort') === 'asc'\n\n  const sortedQuotes = sortQuotes(props.quotes, isAscending)\n\n  const sortingHandler = () => {\n    // Alternative\n    // history.push({\n    //   pathname: location.pathname,\n    //   search: `?sort=${(isAscending ? 'desc' : 'asc')}`\n    // })\n\n    navigate(`${location.pathname}?sort=${(isAscending ? 'desc' : 'asc')}`)\n  }\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={sortingHandler}>Sort {isAscending ? 'Descending' : 'Ascending'}</button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { useEffect } from 'react'\nimport NoQuotesFound from '../components/quotes/NoQuotesFound'\nimport QuoteList from '../components/quotes/QuoteList'\nimport LoadingSpinner from '../components/UI/LoadingSpinner'\nimport useHttp from '../hooks/use-http'\nimport { getAllQuotes } from '../lib/api'\n\nconst AllQuotes = () => {\n  const {sendRequest, status, data: quotes, error} = useHttp(getAllQuotes, true)\n\n  useEffect(() => {\n   sendRequest()\n  },[sendRequest])\n\n  if (status === 'pending') {\n    return (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    )\n  }\n\n  if (error) {\n    return <p className='centered focused'>{error}</p>\n  }\n\n  if (status === 'completed' && (!quotes || quotes.length === 0)) {\n    return <NoQuotesFound />\n  }\n\n  return (\n    <>\n      <QuoteList quotes={quotes} />\n    </>\n  )\n\n}\n\nexport default AllQuotes\n"],"sourceRoot":""}